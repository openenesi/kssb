security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        in_memory:
            memory:
                users:
                    faji:
                        password: masofaji
                        roles: 'ROLE_ADMIN'
        candidate_provider:
            entity:
                class: App\Entity\User
                property: username
    
    encoders:
        Symfony\Component\Security\Core\User\User: plaintext
        App\Entity\User:
            algorithm: bcrypt
            
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        admin:
            anonymous: true
            pattern: ^/kssbadmin
            provider: in_memory
            form_login:
                login_path: adminlogin
                check_path: adminlogin
                use_forward: true
                use_referer: true
                csrf_token_generator: security.csrf.token_manager
            logout:
                path: /kssbadmin/logout
                target: /kssbadmin/adminlogin
        main:
            anonymous: true
#            pattern:   (^/apply)|(^/logincheck)
            provider: candidate_provider
            form_login:
                login_path: login
                check_path: login
                use_forward: true
                use_referer: true
                default_target_path: choice
                csrf_token_generator: security.csrf.token_manager
            logout:
                path: /logout
                target: /login

            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html
            
#        login_firewall:
#           pattern: ^/login$
#           anonymous: ~
           
#        public_firewall:
#           pattern: ^/
#           anonymous: ~



    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    #access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
    access_control:
        #- { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        #- { path: ^/logincheck, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/kssbadmin, roles: ROLE_ADMIN }
        - { path: ^/apply/form_1, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/apply/choice, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/apply/paidwebhook, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/apply/rc, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/apply, roles: ROLE_CANDIDATE}
        - { path: ^/, roles: IS_AUTHENTICATED_ANONYMOUSLY }

    role_hierarchy:
        ROLE_CANDIDATE: [IS_AUTHENTICATED_ANONYMOUSLY]